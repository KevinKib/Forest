unit ecranDeCombat_UNIT;

interface

uses
  fonctionsGlobales_UNIT,
  moduleGestionEcran_UNIT,
  initialisationVariables_UNIT,
  System.SysUtils,
  math;

procedure ecranDeCombat(var game: TGame; var civ: TCivilisation; var combat: TCombat);
{RÔLE : Definit les sous programmes relatifs au combat, dont des procedures d'attaques de camps petits/grands et une procedure
qui s'occupe de l'affichage de l'ecran Combat}


implementation

  var
  {$REGION}
    Perte_Canons_Ennemis,            //perte de canons chez l'ennemi
    Perte_Canons_Joueur,             //perte de canons chez le joueur
    Perte_Soldats_Ennemis,           //perte de soldats chez l'ennemi
    Perte_Soldats_Joueur : Integer;  //perte de soldats chez le joueur

    texteCombat1,
    texteCombat2,
    texteCombat3,
    texteCombat4
    : String;

    texteCombatContre,
    texteBarres,
    texteSoldatsJoueur,
    texteCanonsJoueur,
    texteSoldatsEnnemis,
    texteCanonsEnnemis,
    texteForcesAllies,
    texteForcesEnnemis
    : String;

    // Variables agissant comme des constantes (car elles ne dépendent que de constantes)
    RAND_NBSOLDATS_PETIT,
    RAND_NBCANONS_PETIT,
    RAND_NBSOLDATS_GRAND,
    RAND_NBCANONS_GRAND : Integer;

    attaqueEnnemi : Integer;

    combatTermine: Boolean;
  {$ENDREGION}

  const
  {$REGION}
    // Constante qui décide du nombre maximum de perte de soldats
    RAND_PERTESOLDATS     : Integer = 3;
    RAND_PERTECANONS      : Integer = 2;

    // Nombre de soldats du petit camp
    MIN_NBSOLDATS_PETIT   : Integer = 20;
    MAX_NBSOLDATS_PETIT   : Integer = 30;

    // Nombre de canons du petit camp
    MIN_NBCANONS_PETIT    : Integer = 3;
    MAX_NBCANONS_PETIT    : Integer = 7;

    // Nombre de soldats du grand camp
    MIN_NBSOLDATS_GRAND   : Integer = 80;
    MAX_NBSOLDATS_GRAND   : Integer = 120;

    // Nombre de canons du grand camp
    MIN_NBCANONS_GRAND    : Integer = 20;
    MAX_NBCANONS_GRAND    : Integer = 30;
  {$ENDREGION}

  procedure ecranDeCombat_initVariables();
  begin
    // Constantes de fluctuation
    RAND_NBSOLDATS_PETIT  := 2 + MAX_NBSOLDATS_PETIT - MIN_NBSOLDATS_PETIT;
    RAND_NBCANONS_PETIT   := 2 + MAX_NBCANONS_PETIT - MIN_NBCANONS_PETIT;
    RAND_NBSOLDATS_GRAND  := 2 + MAX_NBSOLDATS_GRAND - MIN_NBSOLDATS_GRAND;
    RAND_NBCANONS_GRAND   := 2 + MAX_NBCANONS_GRAND - MIN_NBCANONS_GRAND;
  end;

  procedure aleatoireNbEffectif(var combat: TCombat);
  begin
    if combat.Adversaire = 'Petit camp barbare' then
      begin
        randomize; combat.SoldatsEnnemis  := random(RAND_NBSOLDATS_PETIT) + MIN_NBSOLDATS_PETIT;
        randomize; combat.CanonsEnnemis   := random(RAND_NBCANONS_PETIT)  + MIN_NBCANONS_PETIT;
      end
    else if combat.Adversaire = 'Grand camp barbare' then
      begin
        randomize; combat.SoldatsEnnemis  := random(RAND_NBSOLDATS_GRAND) + MIN_NBSOLDATS_GRAND;
        randomize; combat.CanonsEnnemis   := random(RAND_NBCANONS_GRAND)  + MIN_NBCANONS_GRAND;
      end;
  end;

  procedure attaque_aleatoire(arsenal: String; combat: TCombat);
  begin

    { On attend un certain intervalle de temps entre chaque Random(),
      car la fonction nécessite du temps pour s'exécuter correctement,
      ce étant dû à l'utilisation de l'algorithme Mersenne Twister.
      Se référer à la documentation : https://www.freepascal.org/docs-html/rtl/system/random.html  }


    // Joueur
    if arsenal = 'Soldats' then
      begin
        randomize; Perte_Soldats_Ennemis := Random(RAND_PERTESOLDATS + min(combat.SoldatsDispo, combat.CanonsDispo) );
        attendre(100);
        randomize; Perte_Canons_Ennemis := Random(RAND_PERTECANONS);
      end
    else if arsenal = 'Canons' then
      begin
        randomize; Perte_Soldats_Ennemis := Random(RAND_PERTESOLDATS);
        attendre(100);
        randomize; Perte_Canons_Ennemis := Random(RAND_PERTECANONS + (min(combat.SoldatsDispo, combat.CanonsDispo) div 2));
      end;

    // IA
    randomize; attaqueEnnemi := Random(2);
    attendre(100);

    if (attaqueEnnemi = 0) and (combat.SoldatsDispo > 0) then
      begin
        randomize; Perte_Soldats_Joueur := Random(RAND_PERTESOLDATS  + min(combat.SoldatsEnnemis, combat.CanonsEnnemis) );
        attendre(100);
        randomize; Perte_Canons_Joueur := Random(RAND_PERTECANONS);
        attendre(100);
      end
    else
      begin
        randomize; Perte_Soldats_Joueur := Random(RAND_PERTESOLDATS );
        attendre(100);
        randomize; Perte_Canons_Joueur := Random(RAND_PERTECANONS + (min(combat.SoldatsEnnemis, combat.CanonsEnnemis) div 2));
        attendre(100);
      end;



  end;

  procedure attaque_affichage(combat: TCombat);
  begin
    texteCombat1 := IntToStr(Perte_Soldats_Joueur);
    texteCombat2 := IntToStr(Perte_Canons_Joueur);
    texteCombat3 := IntToStr(Perte_Soldats_Ennemis);
    texteCombat4 := IntToStr(Perte_Canons_Ennemis);

    ecrireEnPositionXY(32,15,'-');
    ecrireEnPositionXY(32,16,'-');
    ecrireEnPositionXY(32,20,'-');
    ecrireEnPositionXY(32,21,'-');

    couleurTexte(LightRed);
    ecrireEnPositionXY(33,15,'   ');
    ecrireEnPositionXY(33,16,'   ');
    ecrireEnPositionXY(33,20,'   ');
    ecrireEnPositionXY(33,21,'   ');
    ecrireEnPositionXY(33,15,texteCombat1);
    ecrireEnPositionXY(33,16,texteCombat2);
    ecrireEnPositionXY(33,20,texteCombat3);
    ecrireEnPositionXY(33,21,texteCombat4);

    couleurTexte(White);
    ecrireEnPositionXY(29,15,'   ');
    ecrireEnPositionXY(29,16,'   ');
    ecrireEnPositionXY(29,20,'   ');
    ecrireEnPositionXY(29,21,'   ');
    ecrireEnPositionXY(29,15,IntToStr(combat.SoldatsDispo));
    ecrireEnPositionXY(29,16,IntToStr(combat.CanonsDispo));
    ecrireEnPositionXY(29,20,IntToStr(combat.SoldatsEnnemis));
    ecrireEnPositionXY(29,21,IntToStr(combat.CanonsEnnemis));

    deplacerCurseurXY(100,27);
  end;

  procedure attaque(arsenal: String; var combat: TCombat);
  {PRINCIPE : On recupère le descriptif des forces armées de l'ennemi et grâce au hasard on génère les pertes dans les deux camps.
  La procedure renvoie le descrptif des forces restant pour les deux camps}
  begin

    attaque_aleatoire(arsenal, combat);

    // Eviter les nombres de soldats négatifs
    if (Perte_Soldats_Ennemis > combat.SoldatsEnnemis)  then Perte_Soldats_Ennemis  := combat.SoldatsEnnemis;
    if (Perte_Canons_Ennemis > combat.CanonsEnnemis)    then Perte_Canons_Ennemis   := combat.CanonsEnnemis;
    if (Perte_Soldats_Joueur > combat.SoldatsDispo)     then Perte_Soldats_Joueur   := combat.SoldatsDispo;
    if (Perte_Canons_Joueur > combat.CanonsDispo)       then Perte_Canons_Joueur    := combat.CanonsDispo;

    // Décrémentation du nombre de soldats
    combat.SoldatsEnnemis := combat.SoldatsEnnemis  - Perte_Soldats_Ennemis;
    combat.CanonsEnnemis  := combat.CanonsEnnemis   - Perte_Canons_Ennemis;
    combat.SoldatsDispo   := combat.SoldatsDispo    - Perte_Soldats_Joueur;
    combat.CanonsDispo    := combat.CanonsDispo     - Perte_Canons_Joueur;

    // Affichage
    attaque_affichage(combat);
  end;

  procedure deroulementCombat(var game: TGame; var combat: TCombat);
  begin
    combatTermine := False;

    // Boucle de lecture de l'entrée du joueur (tant qu'elle n'est pas bonne, on lui la redemande)
    while not combatTermine do
    begin

      // On définit une valeur de départ à game.Input pour toujours rentrer dans la boucle
      game.Input := 0;

      while (game.Input <> 1) and (game.Input <> 2) do
        begin
          // On efface l'entrée du joueur et on lui la redemande.
          deplacerCurseurXY(100,27);
          writeln('    ');
          deplacerCurseurXY(100,27);

          readln(game.Input);
        end;

      if      (game.Input=1) then attaque('Soldats',combat)
      else if (game.Input=2) then attaque('Canons',combat);

      // Si le combat est terminé, ce booléen retournera Vrai.
      // Le combat se termine lorsque les soldats d'un coté meurent.
      combatTermine := (combat.SoldatsDispo = 0) or (combat.SoldatsEnnemis = 0);
    end;

    readln;
    effacerEcran;

  end;

  procedure ecranDeCombat_afficherTexte(combat: TCombat);
  begin
    texteCombatContre   := 'Combat contre : '+combat.Adversaire;
    texteBarres         := '-------------------------------------';
    texteSoldatsJoueur  := '- Soldats disponibles : '+IntToStr(combat.SoldatsDispo);
    texteCanonsJoueur   := '- Canons disponibles  : '+IntToStr(combat.CanonsDispo);
    texteSoldatsEnnemis := '- Soldats disponibles : '+IntToStr(combat.SoldatsEnnemis);
    texteCanonsEnnemis  := '- Canons disponibles  : '+IntToStr(combat.CanonsEnnemis);
    texteForcesAllies   := 'Descriptif de vos forces :';
    texteForcesEnnemis  := 'Descriptif des forces ennemies :';

    ecrireAuCentre(6,texteCombatContre);
    ecrireAuCentre(7,texteBarres);
    ecrireEnPositionXY(4,14,texteForcesAllies);
    ecrireEnPositionXY(5,15,texteSoldatsJoueur);
    ecrireEnPositionXY(5,16,texteCanonsJoueur);
    ecrireEnPositionXY(4,19,texteForcesEnnemis);
    ecrireEnPositionXY(5,20,texteSoldatsEnnemis);
    ecrireEnPositionXY(5,21,texteCanonsEnnemis);
  end;

  procedure ecranDeResultats(game: TGame; civ: TCivilisation; var combat: TCombat);
  begin

    displayHeader(civ.texteCivilisation, civ.texteTour, civ.Nom, game.NbTour);
    dessinerCadreXY(42,14,77,18, simple, White, Black);

    if (combat.SoldatsDispo = 0) then
      begin
        // Défaite
        couleurTexte(LightRed);
        ecrireAuCentre(16,'Vous avez perdu le combat...');
        combat.CanonsDispo := 0;
      end
    else
      begin
        // Victoire
        couleurTexte(LightGreen);
        ecrireAuCentre(16,'Vous avez gagné le combat!');
        combat.CanonsDispo := combat.CanonsDispo + combat.CanonsEnnemis;
      end;

    // Affichage du cadre de réponse
    dessinerCadreXY(95,26,105,28, simple, White, Black);
    deplacerCurseurXY(100,27);
    readln;
  end;

  procedure ecranDeCombat(var game: TGame; var civ: TCivilisation; var combat: TCombat);
  {PRINCIPE : Grace au Seed qui distinue entre eux les petits camps et grands, on genere des valeurs }
  begin

    // Header
    displayHeader(civ.texteCivilisation, civ.texteTour, civ.Nom, game.NbTour);

    // Aléatoire qui décide de l'effectif ennemi
    aleatoireNbEffectif(combat);

    // Affichage du texte de l'écran de combat
    ecranDeCombat_afficherTexte(combat);

    // Initialisation des variables de fluctuation (rand)
    ecranDeCombat_initVariables();

    // Choix du joueur
    ecrireEnPositionXY(4,24,'1 - Attaquer les soldats ennemis');
    ecrireEnPositionXY(4,25,'2 - Attaquer les canons ennemis');

    // Cadre
    dessinerCadreXY(95,26,105,28, simple, White, Black);
    deplacerCurseurXY(100,27);

    // Combat
    deroulementCombat(game, combat);

    // Affichage des résultats du combat
    ecranDeResultats(game, civ, combat);

    // Sortie de la procédure
    game.Screen := 'gestionDeCombat';
    effacerEcran();

  end;



end.
